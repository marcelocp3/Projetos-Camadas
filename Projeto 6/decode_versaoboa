
#Importe todas as bibliotecas
from suaBibSignal import *
import peakutils    #alternativas  #from detect_peaks import *   #import pickle
import numpy as np
import sounddevice as sd
import matplotlib.pyplot as plt
import time


#funcao para transformas intensidade acustica em dB, caso queira usar
def todB(s):
    if s > 0:
        sdB = 10*np.log10(s)
        return(sdB)
    else:
        return s


def main():

    #*****************************instruções********************************
 
    #declare um objeto da classe da sua biblioteca de apoio (cedida)   
    # algo como:
    signal = signalMeu() 
       
    #voce importou a bilioteca sounddevice como, por exemplo, sd. entao
    # os seguintes parametros devem ser setados:
    samplerate = 44100
    sd.default.samplerate = samplerate #taxa de amostragem
    channels = 1
    sd.default.channels = channels #numCanais # o numero de canais, tipicamente são 2. Placas com dois canais. Se ocorrer problemas pode tentar com 1. No caso de 2 canais, ao gravar um audio, terá duas listas.
    #Muitas vezes a gravação retorna uma lista de listas. Você poderá ter que tratar o sinal gravado para ter apenas uma lista.
    duration = 3 # #tempo em segundos que ira aquisitar o sinal acustico captado pelo mic   
    #calcule o numero de amostras "numAmostras" que serao feitas (numero de aquisições) durante a gravação. Para esse cálculo você deverá utilizar a taxa de amostragem e o tempo de gravação
    numAmostras = duration * samplerate
    #faca um print na tela dizendo que a captação comecará em n segundos. e então 
    #use um time.sleep para a espera.
   
    #A seguir, faca um print informando que a gravacao foi inicializada
    print('Gravando...')
    #para gravar, utilize
    audio = sd.rec(int(numAmostras), samplerate, channels=channels)
    
    sd.wait()
    
    # sd.play(audio, samplerate)
    # sd.wait()
    print('--------------------------------------------------')

    audio = audio.flatten()
    #analise sua variavel "audio". pode ser um vetor com 1 ou 2 colunas, ou uma lista, ou ainda uma lista de listas (isso dependerá do seu sistema, drivers etc...).
    print(audio)
    #extraia a parte que interessa da gravação (as amostras) gravando em uma variável "dados". Isso porque a variável audio pode conter dois canais e outas informações). 
 
    # use a funcao linspace e crie o vetor tempo. Um instante correspondente a cada amostra!
    t = np.linspace(0, duration, numAmostras)
    audiodB = [todB(a) for a in audio]
    
    # plot do áudio gravado (dados) vs tempo! Não plote todos os pontos, pois verá apenas uma mancha (freq altas) . 
    plt.plot(t, audio)
    plt.show()
       
    ## Calcule e plote o Fourier do sinal audio. como saída tem-se a amplitude e as frequências.
    # xf, yf = signal.calcFFT(audio, samplerate)
    # signal.plotFFT(audio[1000:20000:200], samplerate)
    xf, yf = signal.plotFFT(audio, samplerate)

    # abra essa list comprehension em um for
    xf_corte = []
    yf_corte = []
    for i, x in enumerate(xf):
        if x < 2000 and x > 500:
            xf_corte.append(x)
            yf_corte.append(yf[i])
    
    xf_corte = np.array(xf_corte)
    yf_corte = np.array(yf_corte)
    
    #Agora você terá que analisar os valores xf e yf e encontrar em quais frequências estão os maiores valores (picos de yf) de da transformada.
    #Encontrando essas frequências de maior presença (encontre pelo menos as 5 mais presentes, ou seja, as 5 frequências que apresentam os maiores picos de yf). 
    #Cuidado, algumas frequências podem gerar mais de um pico devido a interferências na tranmissão. Quando isso ocorre, esses picos estão próximos. Voce pode desprezar um dos picos se houver outro muito próximo (5 Hz). 
    #Alguns dos picos  (na verdade 2 deles) devem ser bem próximos às frequências do DTMF enviadas!
    #Para descobrir a tecla pressionada, você deve encontrar na tabela DTMF frquências que coincidem com as 2 das 5 que você selecionou.
    #Provavelmente, se tudo deu certo, 2 picos serao PRÓXIMOS aos valores da tabela. Os demais serão picos de ruídos.
    
    teclas = {
        1: (679, 1209),
        2: (679, 1336),
        3: (679, 1477),
        'A': (679, 1633),
        4: (770, 1209),
        5: (770, 1336),
        6: (770, 1477),
        'B': (770, 1633),
        7: (825, 1209),
        8: (825, 1336),
        9: (825, 1477),
        'C': (825, 1633),
        '*': (941, 1209),
        0: (941, 1336),
        '#': (941, 1477),
        'D': (941, 1633)
    }
    
    # Encontrar 5 picos de yf e seus valores de xf, comparar com a tabela DTMF e descobrir a tecla pressionada
    indexes = []
    i = 0.8
    while len(indexes) < 5:
        indexes = peakutils.indexes(yf_corte, thres=i, min_dist=5)
        i /= 1.2
    print(indexes)
    freqs = [xf_corte[i] for i in indexes]
    print(freqs)
    
    baixa = None
    alta = None
    for f in freqs:
        for key, value in teclas.items():
            if abs(f - value[0]) < 5:
                baixa = f
            if abs(f - value[1]) < 5:
                alta = f
            # print(f'Freqs: {baixa}, {alta}')
            if baixa and alta:
                break
    
    for key, value in teclas.items():
        if abs(value[0] - baixa) < 5 and abs(value[1] - alta) < 5:
            print(f"A tecla detectada foi: {key}")
            break
    
    
    #printe os picos encontrados! 
    
    #encontre na tabela duas frequencias proximas às frequencias de pico encontradas e descubra qual foi a tecla
    #print o valor tecla!!!
    #Se acertou, parabens! Voce construiu um sistema DTMF

    #Você pode tentar também identificar a tecla de um telefone real! Basta gravar o som emitido pelo seu celular ao pressionar uma tecla. 

      
    ## Exiba gráficos do fourier do som gravados 
    # plt.show()

if __name__ == "__main__":
    main()
